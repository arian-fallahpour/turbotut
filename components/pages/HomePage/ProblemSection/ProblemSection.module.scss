@import "@/sass/abstracts/mixins";

section.ProblemSection {
  padding-top: 0;
}

.Container {
  padding: 0.05rem;
  border-radius: var(--bd-radius);
  background-color: var(--c-panel-bd);
  position: relative;
  overflow: hidden;

  &Gradient1,
  &Gradient2 {
    display: block;
    position: absolute;
    top: 0;
    width: 30rem;
    height: 10rem;
    translate: -50% -50%;
    border-radius: 100%;
    filter: blur(30px);
  }

  &Gradient1 {
    left: calc(100% * (1 / 6));
    background: rgba(var(--c-orange-rgb), 1);
  }

  &Gradient2 {
    left: calc(100% * (5 / 6));
    background: rgba(var(--c-red-rgb), 1);
  }

  &Content {
    overflow: hidden;
    position: relative;
    border-radius: calc(var(--bd-radius) - 0.05rem);
    background-image: radial-gradient(
      ellipse at 35% 0%,
      rgba(var(--c-bg-light-rgb), 1) 30%,
      rgba(var(--c-bg-dark-rgb), 1) 110%
    );

    display: grid;
    grid-template-columns: repeat(3, 1fr);

    & > * {
      padding: var(--gap-lg);

      &:not(:last-child) {
        border-right: 0.1rem solid var(--c-panel-bd);
      }
    }
  }
}

.Content {
  display: grid;
  gap: var(--gap-lg);
  align-content: start;
}

.Problem,
.Reality {
  position: relative;

  &::before {
    content: "";
    display: block;
    position: absolute;
    left: 50%;
    top: 0;
    translate: -50% -50%;
    width: 75%;
    height: 15rem;
    filter: blur(50px);
  }
}

.Problem {
  &::before {
    background: rgba(var(--c-orange-rgb), 0.4);
  }

  &Light {
    $height: 0.5rem;
    $width: 10rem;

    position: absolute;
    top: 0;
    left: 50%;
    translate: -50% 0;
    margin: 0 $height;

    &1,
    &2,
    &3 {
      display: block;
      background-color: var(--c-orange);
    }

    &1,
    &3 {
      width: calc(2 * #{$height});
      height: auto;
      aspect-ratio: 1;
      position: absolute;
      top: 0;
      rotate: 45deg;
      border-bottom-right-radius: $height;
    }

    &1 {
      left: 0;
      translate: -50% -50%;
    }

    &2 {
      width: $width;
      height: $height;
    }

    &3 {
      right: 0;
      translate: 50% -50%;
    }
  }
}

.Game {
  &Buttons {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--gap-md);
    justify-self: center;
  }

  &Button {
  }

  &::before {
    background: rgba(var(--c-red-rgb), 0.4);
  }
}

.Game > .GameButtons > .GameButton {
  display: grid;
  align-content: center;
  justify-items: center;

  background-color: transparent;
  gap: 0;
  border: 0.1rem solid var(--c-panel-bd);
  background: var(--c-panel-bg);
  padding: 0;
  width: 7.5rem;
  height: auto;
  aspect-ratio: 1;
  border-radius: 100%;
  color: var(--txt-text);

  transition: scale 0.2s ease, border 0.2s ease, color 0.2s ease, background 0.2s ease;

  &:hover,
  &:focus-visible {
    scale: 1.05;
  }

  &--1.active {
    border-color: var(--c-blue);
    color: rgba(var(--c-blue-rgb), 0.75);
    background-color: rgba(var(--c-blue-rgb), 0.1);
  }

  &--2.active {
    border-color: var(--c-green);
    color: rgba(var(--c-green-rgb), 0.75);
    background-color: rgba(var(--c-green-rgb), 0.1);
  }

  &--3.active {
    border-color: var(--c-orange);
    color: rgba(var(--c-orange-rgb), 0.75);
    background-color: rgba(var(--c-orange-rgb), 0.1);
  }

  &:not(.active) {
    animation: shake 0.7s;
  }

  & > svg {
    width: 2.5rem;
    height: 2.5rem;
  }

  & > span {
    font-size: 1.25rem;
  }
}

.Reality {
  &::before {
    background: rgba(var(--c-red-rgb), 0.4);
  }
}

@keyframes shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }

  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }

  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }

  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}
