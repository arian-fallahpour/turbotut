@import "@/sass/abstracts/mixins";

section.ProblemSection {
  padding-top: 0;
}

.ContainerShadow {
  display: block;
  position: absolute;
  top: 60%;
  left: 50%;
  translate: -50% -50%;
  width: 50vw;
  height: 10rem;
  background: rgba(var(--c-orange-rgb), 0.2);
  filter: blur(100px);
}

.Container {
  z-index: 1;
  padding: 0.1rem;
  border-radius: var(--bd-radius);
  background-color: var(--c-panel-bd);
  position: relative;
  overflow: hidden;

  &Gradient {
    display: block;
    position: absolute;
    top: 0;
    width: 30rem;
    height: 10rem;
    translate: -50% -50%;
    border-radius: 100%;
    filter: blur(30px);
    left: calc(100% * (1 / 6));
    background: rgba(var(--c-orange-rgb), 1);
  }

  &Content {
    overflow: hidden;
    position: relative;
    border-radius: calc(var(--bd-radius) - 0.1rem);
    background-image: radial-gradient(
      ellipse at 35% 0%,
      rgba(var(--c-bg-light-rgb), 1) 30%,
      rgba(var(--c-bg-dark-rgb), 1) 110%
    );

    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }
}

.Content {
  padding: var(--gap-lg);
  position: relative;

  display: grid;
  gap: var(--gap-lg);
  align-content: start;

  &:not(:last-child) {
    border-right: 0.1rem solid var(--c-panel-bd);
  }
}

.Problem {
  position: relative;

  &::before {
    content: "";
    display: block;
    position: absolute;
    left: 50%;
    top: 0;
    translate: -50% -50%;
    width: 75%;
    height: 15rem;
    filter: blur(50px);
  }
}

.Problem {
  grid-template-rows: auto 1fr;

  &::before {
    background: rgba(var(--c-orange-rgb), 0.4);
  }

  &Content {
    display: grid;
    align-content: center;
  }
}

.Game {
  grid-template-rows: auto auto 1fr;

  &Buttons {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--gap-md);
    justify-self: center;
    align-content: center;
  }

  &Button {
  }

  &::before {
    background: rgba(var(--c-red-rgb), 0.4);
  }
}

.Game > .GameButtons > .GameButton {
  display: grid;
  align-content: center;
  justify-items: center;

  background-color: transparent;
  gap: 0;
  border: 0.1rem solid var(--c-panel-bd);
  background: var(--c-panel-bg);
  padding: 0;
  width: 7.5rem;
  height: auto;
  aspect-ratio: 1;
  border-radius: 100%;
  color: var(--txt-text);

  transition: scale 0.2s ease, border 0.2s ease, color 0.2s ease, background 0.2s ease;

  &:hover,
  &:focus-visible {
    scale: 1.05;
  }

  &--1.active {
    border-color: var(--c-blue-light);
    color: rgba(var(--c-blue-light-rgb), 1);
    background-color: rgba(var(--c-blue-light-rgb), 0.2);
  }

  &--2.active {
    border-color: var(--c-green);
    color: rgba(var(--c-green-rgb), 0.75);
    background-color: rgba(var(--c-green-rgb), 0.2);
  }

  &--3.active {
    border-color: var(--c-orange);
    color: rgba(var(--c-orange-rgb), 0.75);
    background-color: rgba(var(--c-orange-rgb), 0.2);
  }

  &.preload {
    animation-duration: 0s !important;
  }

  &:not(.active) {
    animation: shake 0.7s;
  }

  & > svg {
    width: 2.5rem;
    height: 2.5rem;
  }

  & > span {
    font-size: 1.25rem;
  }
}

.Reality {
  &List {
    display: grid;
    gap: var(--gap-md);
  }

  &ListItem {
    display: grid;
    gap: var(--gap-sm);
    grid-template-columns: auto 1fr;
  }
}

@keyframes shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }

  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }

  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }

  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}
